create database joins;
use joins;

create table Employees(
EmployeeID bigint primary key Auto_increment ,
EmployeeName varchar(50),
DepartmentID bigint,
foreign key(DepartmentID) references Departments(DepartmentID)
);
drop table Employees; 

create table Departments(
DepartmentID bigint primary key  ,
DepartmentName varchar(50)
);

create table Projects(
ProjectID bigint primary key,
ProjectName varchar(50),
DepartmentID bigint,
foreign key(DepartmentID) references Departments(DepartmentID) ON DELETE SET NULL ON UPDATE CASCADE
);
drop table Employees;
insert into Employees(EmployeeName,DepartmentID) values ('John',1),('Jane',2),('Mark',1),('Emily',3),('Karen',5);
insert into Departments(DepartmentID,DepartmentName) values(1,'Sales'),(2,'HR'),(3,'IT'),(4,'Marketing'),(5,null);
insert into Projects(ProjectID,ProjectName,DepartmentID) values (101,'Project A',1),(102,'Project B',2),(103,'Project C',3),(104,'Project D',4),(105,'Project E',null);


-- 1.Retrieve the list of employees along with their department names where employees are associated with departments.


select EmployeeName, DepartmentName from Employees inner join Departments on Employees.DepartmentId=Departments.DepartmentId;


-- 2.Retrieve all employees and their associated department names. If an employee does not belong to a department, show NULL.

select EmployeeName, DepartmentName from Employees left join Departments on Employees.DepartmentId=Departments.DepartmentId;


-- 3.Retrieve all departments and the names of employees in those departments. If a department does not have any employees, show NULL.

SELECT DepartmentName, EmployeeName
FROM Departments
LEFT JOIN Employees ON Departments.DepartmentID = Employees.DepartmentID;


--4.Retrieve all possible combinations of employees and projects

SELECT EmployeeName, ProjectName
FROM Employees
CROSS JOIN Projects;


--5.Retrieve the list of employees whose department ID is greater than the department ID of 'HR' department.

SELECT Employees.EmployeeName
FROM Employees
INNER JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID
WHERE Employees.DepartmentID > (SELECT DepartmentID FROM Departments WHERE DepartmentName = 'HR');


-- 6.Retrieve the list of projects along with their department names, where the projects are associated with departments


SELECT Projects.ProjectName, Departments.DepartmentName
FROM Projects
INNER JOIN Departments ON Projects.DepartmentID = Departments.DepartmentID;


-- 7.Find employees who are not assigned to any department



SELECT Employees.EmployeeName
FROM Employees
LEFT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID
WHERE Departments.DepartmentID IS NULL;


-- 8.Find departments that have no employees


SELECT Employees.EmployeeName
FROM Employees
LEFT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID
WHERE Departments.DepartmentID IS NULL;


-- 9.Find all departments along with the number of employees in each department


SELECT Departments.DepartmentName
FROM Departments
LEFT JOIN Employees ON Departments.DepartmentID = Employees.DepartmentID
WHERE Employees.DepartmentID IS NULL;
